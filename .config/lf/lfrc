# interpreter for shell commands
set shell sh

# Basic Settings
set hidden true
set ignorecase true
#set icons true

# Custom Functions

cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}


cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}


cmd chmod ${{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done

  lf -remote 'send reload'
}}


cmd fzf_jump ${{
  res="$(find . -maxdepth 3 | fzf --reverse --header='Jump to location')"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

#############NOT USING TRASH FOR NOW BECAUSE ITS TOO DANGEROUS TO ACCIDENTLY DELETE AN IMPORTANT FILE
## Trash cli bindings
#cmd trash ${{
#  files=$(printf "$fx" | tr '\n' ';')
#  while [ "$files" ]; do
#    # extract the substring from start of string up to delimiter.
#    # this is the first "element" of the string.
#    file=${files%%;*}
#
#    trash-put "$(basename "$file")"
#    # if there's only one element left, set `files` to an empty string.
#    # this causes us to exit this `while` loop.
#    # else, we delete the first "element" of the string from files, and move onto the next.
#    if [ "$files" = "$file" ]; then
#      files=''
#    else
#      files="${files#*;}"
#    fi
#  done
#}}
#
#cmd clear_trash %trash-empty
#
#cmd restore_trash ${{
#  trash-restore
#}}
#

# Bindings 
# Remove some defaults
map m
map o
map n
map "'"
map '"'
map d
map c


# Basic Functions
map p paste
map x cut
map y copy
map <enter> open
map R reload
map md mkdir
map mf mkfile

# Movement
map gd cd ~/documents
map gD cd ~/Downloads
map gp cd ~/pictures
map gc cd ~/.config
map gs cd ~/scripts
map ch chmod

# Fzf  Mapping
map f fzf_jump



# Archive Mappings
map au unarchive

#############NOT USING TRASH FOR NOW BECAUSE ITS TOO DANGEROUS TO ACCIDENTLY DELETE AN IMPORTANT FILE
## Trash Mappings
#map dd trash
#map tc clear_trash
#map tr restore_trash

